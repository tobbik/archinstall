#!/bin/bash
PLAYER_PICKLE_DIR=~/.local/state/playerstatus
MPC_FORMAT="%title%\n%artist%\n%file%"

function notify_screen() {
  local msgTag="playerInfo"
  local cmd=$1
  local player=$2
  local metadata=${3}
  local status=$(playerctl --player=${player} status)
  if [[ "" == "${metadata}" ]]; then
    metadata=$(playerctl --player=${player} --format="{{title}}
{{artist}}" metadata)
  fi
  local title=$(echo "${metadata}"  | sed -n '1p')
  local artist=$(echo "${metadata}" | sed -n '2p')
  local file=$(echo "${metadata}" | sed -n '3p')

  notify-send --app-name "playerNowPlaying" \
      --expire-time 5000 --urgency low --transient \
      --hint string:x-dunst-stack-tag:$msgTag \
      "${player} ${status} (${cmd}):" "${artist} - ${title}"
}

function pickle_media_player() {
  local player=$1
  [ -d ${PLAYER_PICKLE_DIR} ] || mkdir -p ${PLAYER_PICKLE_DIR}
  local state=$(playerctl --player=${player} status)
  if [[ "Playing" =~ "${state}" ]]; then
    echo "pickling ${player} ${state}"
    echo "${state}" > "${PLAYER_PICKLE_DIR}/${player}"
    playerctl --player=${player} pause
    notify_screen "Pickle and Pause" "${player}"
  fi
}

function unpickle_media_player() {
  local player=$1
  [ ! -f ${PLAYER_PICKLE_DIR}/${player} ] && exit 0
  local state=$(cat ${PLAYER_PICKLE_DIR}/${player})
  echo "unlocking ${PLAYER} ${state}"
  if [[ "Playing" =~ "${state}" ]]; then
    playerctl --player=${player} play
    notify_screen "Resume and Play" "${player}"
  fi
  rm --force ${PLAYER_PICKLE_DIR}/${player}
}

function all_pause() {
  for PLAYER in $(playerctl --list-all); do
    pickle_media_player "${PLAYER}"
  done
}

function all_resume() {
  [ ! -d ${PLAYER_PICKLE_DIR} ] && exit 0
  for PLAYER in $(ls ${PLAYER_PICKLE_DIR}); do
    unpickle_media_player "${PLAYER}"
  done
}

function usage() {
  printf "USAGE: mpd-control <next|prev|toggle>\n"
  printf "   next    -> Next song in playlist\n"
  printf "   prev    -> Previous song in playlist\n"
  printf "   toggle  -> Toggle between pause and play\n"
}

main() {
  case "$1" in
    next)
      notify_screen "Next" "mpd" "$(mpc --format="$MPC_FORMAT" next)"
      ;;
    prev)
      notify_screen "Previous" "mpd" "$(mpc --format="$MPC_FORMAT" prev)"
      ;;
    toggle)
      notify_screen "Toggle" "mpd" "$(mpc --format="$MPC_FORMAT" toggle)"
      ;;
    allpause)
      all_pause
      ;;
    allresume)
      all_resume
      ;;
   *)
     usage
  esac
}

main "$@"
